map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
  listen 80;
  server_name ${SERVER_NAME} www.${SERVER_NAME};
  return 301 https://$host$request_uri;
}

server {
  listen              443 ssl http2;
  server_name         ${SERVER_NAME};
  keepalive_timeout   120;

  client_body_in_file_only clean;
  client_body_buffer_size 32K;

  client_max_body_size 1024M;

  sendfile on;
  send_timeout 300s;

  ssl_certificate     /usr/share/nginx/ssl/server.crt;
  ssl_certificate_key /usr/share/nginx/ssl/server.key;

  ##
  # Gzip Settings
  ##
  gzip on;
  # set the Vary: Accept-Encoding header to force proxies to store compressed and uncompressed versions
  # per the nginx docs, a bug in IE 4 - 6 will cause them to not cache anything with this on
  # most people aren't going to care about ie 6 anymore, but keep that in mind
  gzip_vary on;
  # compress proxied requests too.
  # it doesn't actually matter if the request is proxied, we still want it compressed.
  gzip_proxied any;
  # increase the compression level, at the expense of additional CPU
  # cpu cycles are cheap virtually everywhere now, bandwidth not nearly as much
  gzip_comp_level 9;
  # increase the size of the buffers which hold responses to make sure larger content can be compressed too
  # this means there are 16 buffers and they can each hold 8k
  # if you serve a lot of ridiculously large text (like combined CSS) you might consider upping this slightly
  gzip_buffers 16 8k;
  # a pretty comprehensive list of content mime types that we want to compress
  # there's a lot of repetition here because different applications might use different
  # (and possibly non-standard) types. we don't really care, we still want them included
  # don't include text/html -- it is always included anyway
  gzip_types
  	text/css
  	text/plain
  	text/javascript
  	application/javascript
  	application/json
  	application/x-javascript
  	application/xml
  	application/xml+rss
  	application/xhtml+xml
  	application/x-font-ttf
  	application/x-font-opentype
  	application/vnd.ms-fontobject
  	image/svg+xml
  	image/x-icon
  	application/rss+xml
  	application/atom_xml;
  # the default is to gzip only HTTP 1.1 requests
  # we want to gzip http 1.0 requests, too, so lower the level required
  gzip_http_version 1.0;
  # up the minimum length a little to account for gzip overhead
  # this means anything smaller than 50 bytes won't be compressed.
  # the default is 20 bytes, which is sooo tiny it's a waste to compress
  gzip_min_length 50;

  location / {
    proxy_pass http://${FRONTEND_HOST}:${FRONTEND_PORT};
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_cache off;
  }

  location /ws {
    proxy_pass http://${WS_HOST}:${WS_PORT};
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_cache off;
  }

  location /static {
    proxy_pass http://${SERVER_HOST}:${SERVER_PORT};
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_cache off;
  }

  location /api {
    proxy_pass http://${SERVER_HOST}:${SERVER_PORT};
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_cache off;
  }
}
