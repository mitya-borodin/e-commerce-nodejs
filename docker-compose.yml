version: "3.7"
services:
  nginx:
    restart: always
    build:
     context: "./nginx"
     dockerfile: "Dockerfile.dev"
    ports:
      - "127.0.0.1:3050:443"
    environment:
      FRONTEND_HOST: frontend
      FRONTEND_PORT: 8080
      SERVER_NAME: e-commerce-nodejs.ru
      SERVER_HOST: backend
      SERVER_PORT: 10000
      WS_HOST: backend
      WS_PORT: 10001
    command: /bin/bash -c "envsubst '\$$FRONTEND_HOST \$$FRONTEND_PORT \$$SERVER_NAME \$$SERVER_HOST \$$SERVER_PORT \$$WS_HOST \$$WS_PORT' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
    depends_on:
      - frontend
      - backend
    networks:
      - e-commerce-nodejs-network
      
  frontend:
    restart: always
    build: 
      context: "./packages/frontend"
      dockerfile: "Dockerfile.dev"
    volumes:
      - /app/node_modules
      - ./packages/frontend:/app
    environment:
      SERVER_NAME: e-commerce-nodejs.ru
      SERVER_HOST: backend
      SERVER_PORT: 10000
      WS_HOST: backend
      WS_PORT: 10001
    depends_on:
      - backend
    networks:
      - e-commerce-nodejs-network

  backend:
    restart: "always"
    build: 
      context: "./packages/backend"
      dockerfile: "Dockerfile.dev"
    ports:
      - "9229:9229"
    volumes:
      - /app/node_modules
      - ./packages/backend:/app
      - ./uploadedFiles:/app/uploadedFiles
    environment:
      JWT_SECRET_KEY: xtoLhZqKfmXU2MVjHuu74AvYUeBsswsWFXxzsbNJ4U3iinJjGs9RAxmzcrU3UrHR
      DB_URL: mongodb://mongoDB:27017
      DB: example-db-name
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 10000
      WS_HOST: 0.0.0.0
      WS_PORT: 10001
    depends_on:
      - mongoDB
    networks:
      - e-commerce-nodejs-network

  mongoDB:
    restart: "always"
    image: mongo:4.2.3
    ports:
      - "127.0.0.1:27021:27017"
    volumes:
      - ./data/db:/data/db
    networks:
      - e-commerce-nodejs-network

networks:
  e-commerce-nodejs-network:
